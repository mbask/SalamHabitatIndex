geom_boxplot(aes(y = speed, x = factor(weight), color = factor(weight)))
ggplot(bici) +
geom_boxplot(aes(y = speed, x = factor(weight), color = factor(weight)))
ggplot(bici) +
geom_boxplot(aes(y = speed, x = factor(weight), color = factor(heatIdx)))
source('~/Desktop/bici.R', echo=TRUE)
plot(ctree(speed~elGain+heatIdx+weight, data=rbind(bici, bici, bici), controls = ctree_control(mincriterion=0.1)))
plot(ctree(speed~elGain+heatIdx+weight, data=rbind(bici, bici, bici), controls = ctree_control(mincriterion=0.9)))
plot(ctree(speed~weight+elGain+heatIdx, data=rbind(bici, bici, bici), controls = ctree_control(mincriterion=0.9)))
plot(ctree(speed~weight+heatIdx, data=rbind(bici, bici, bici), controls = ctree_control(mincriterion=0.9)))
plot(ctree(speed~elGain+heatIdx, data=rbind(bici, bici, bici), controls = ctree_control(mincriterion=0.9)))
weight
plot(ctree(speed~weight+elGain+heatIdx, data=rbind(bici, bici, bici), controls = ctree_control(mincriterion=0.9)))
treeAsy <- function(tree,       # ctree to be plotted
off.f,      # tree plot fixed shift
off.v,      # tree plot variable shift
file.name,  # output file name
preamble) { # preamble for asy
minv <- +Inf
maxv <- -Inf
response <- names(tree@responses@variables)
plot.node <- function(root,
nest = 0,            # level in a tree
pOffset = 0,         # plotting offset
condition = "root",  # split condition text
id = "root") {       # block name in asy
if (length(root$prediction) > 1) {
stop("Only single prediction value supported")
}
if (root$prediction < minv) minv <<- root$prediction
if (root$prediction > maxv) maxv <<- root$prediction
child.l <- ""
child.r <- ""
if (!root$terminal) {
if (class(root$psplit) == "orderedSplit") {
varN <- root$psplit$variableName
point <- root$psplit$splitpoint
left <- paste(varN, "$\\leq$", point, sep="")
right <- paste(varN, "$>$", point, sep="")
} else {
stop("Only orderedSplit supported")
}
add <- "add(new void(picture pic, transform t) {
blockconnector operator --=blockconnector(pic,t);\n  "
child.l <- paste(plot.node(root$left, nest + 1,
pOffset - off.f - 1 / off.v ^ nest,
left, paste(id,"l",sep="")),
add,id,"--Down--Left--Down--",id,"l;\n});\n\n", sep="")
child.r <- paste(plot.node(root$right, nest + 1,
pOffset + off.f + 1 / off.v ^ nest,
right, paste(id,"r",sep="")),
add,id,"--Down--Right--Down--",id,"r;\n});\n\n", sep="")
}
paste("block ", id, " = rectangle(Label(\"",
condition, "\"),
pack(Label(\"n=", sum(root$weights), "\"),
Label(\"", response, "=",
format(root$prediction), "\")),
(", pOffset, ",", -nest, "), lightgray, col(",
root$prediction, "));",
"\ndraw(", id,");\n\n",
child.l, child.r, sep="")
}
treestruct <- plot.node(tree@tree)
cat(file=file.name,
preamble,
"\nimport flowchart;\n",
"pen col(real x) {
real minv = ", minv, ";
real maxv = ", maxv, ";
real ratio = 1 - (x - minv) / (maxv - minv);
return rgb(1, ratio, ratio);
}\n\n",
treestruct, "\n", sep="")
shell(paste("asy -f png", file.name))
}
ct <- ctree(speed~weight+elGain+heatIdx, data=rbind(bici, bici, bici), controls = ctree_control(mincriterion=0.9))
treeAsy(ct)
treeAsy
treeAsy(ct, -0.25, 1.4, "tree.asy",
"size(22cm,12cm, keepAspect=false);")
apropos("shell")
treeAsy <- function(tree,       # ctree to be plotted
off.f,      # tree plot fixed shift
off.v,      # tree plot variable shift
file.name,  # output file name
preamble) { # preamble for asy
minv <- +Inf
maxv <- -Inf
response <- names(tree@responses@variables)
plot.node <- function(root,
nest = 0,            # level in a tree
pOffset = 0,         # plotting offset
condition = "root",  # split condition text
id = "root") {       # block name in asy
if (length(root$prediction) > 1) {
stop("Only single prediction value supported")
}
if (root$prediction < minv) minv <<- root$prediction
if (root$prediction > maxv) maxv <<- root$prediction
child.l <- ""
child.r <- ""
if (!root$terminal) {
if (class(root$psplit) == "orderedSplit") {
varN <- root$psplit$variableName
point <- root$psplit$splitpoint
left <- paste(varN, "$\\leq$", point, sep="")
right <- paste(varN, "$>$", point, sep="")
} else {
stop("Only orderedSplit supported")
}
add <- "add(new void(picture pic, transform t) {
blockconnector operator --=blockconnector(pic,t);\n  "
child.l <- paste(plot.node(root$left, nest + 1,
pOffset - off.f - 1 / off.v ^ nest,
left, paste(id,"l",sep="")),
add,id,"--Down--Left--Down--",id,"l;\n});\n\n", sep="")
child.r <- paste(plot.node(root$right, nest + 1,
pOffset + off.f + 1 / off.v ^ nest,
right, paste(id,"r",sep="")),
add,id,"--Down--Right--Down--",id,"r;\n});\n\n", sep="")
}
paste("block ", id, " = rectangle(Label(\"",
condition, "\"),
pack(Label(\"n=", sum(root$weights), "\"),
Label(\"", response, "=",
format(root$prediction), "\")),
(", pOffset, ",", -nest, "), lightgray, col(",
root$prediction, "));",
"\ndraw(", id,");\n\n",
child.l, child.r, sep="")
}
treestruct <- plot.node(tree@tree)
cat(file=file.name,
preamble,
"\nimport flowchart;\n",
"pen col(real x) {
real minv = ", minv, ";
real maxv = ", maxv, ";
real ratio = 1 - (x - minv) / (maxv - minv);
return rgb(1, ratio, ratio);
}\n\n",
treestruct, "\n", sep="")
system(paste("asy -f png", file.name))
}
treeAsy(ct, -0.25, 1.4, "tree.asy",
"size(22cm,12cm, keepAspect=false);")
ct <- ctree(speed~weight+elGain+heatIdx+fitIdx, data=rbind(bici, bici, bici), controls = ctree_control(mincriterion=0.9))
treeAsy(ct, -0.25, 1.4, "tree.asy",
"size(22cm,12cm, keepAspect=false);")
ct <- ctree(speed~weight+elGain+heatIdx+fitIdx, data=rbind(bici, bici, bici), controls = ctree_control(mincriterion=0.9))
plot(ct)
source('~/Desktop/bici.R')
setwd("~/Desktop")
library('ProjectTemplate')
create.project('letters')
source('~/.active-rstudio-document', echo=TRUE)
viewData(coefs)
fix(regressions)
source('~/.active-rstudio-document', echo=TRUE)
summary)Cars93
summarise(Cars93)
summary(Cars93)
regressions <- dlply(Cars93, .(Origin), print)
Cars93 <- complete.cases(Cars93)
regressions <- dlply(Cars93, .(Origin), rlm, formula = Horsepower ~ EngineSize)
fix(Cars93)
require(MASS); require(plyr)
Cars93 <- Cars93[complete.cases(Cars93),]
# SPLIT-APPLY-COMBINE
regressions <- dlply(Cars93, .(Origin), rlm, formula = Horsepower ~ EngineSize, maxit = 150, psi = "psi.bisquare")
viewData(Cars93)
regressions <- dlply(Cars93, .(Origin), function(x) rlm(data = x, formula = Horsepower ~ EngineSize, maxit = 150, psi = "psi.bisquare"))
regressions <- dlply(Cars93, .(Origin), function(d) rlm(data = d, formula = Horsepower ~ EngineSize, maxit = 150, psi = "psi.bisquare"))
regressions <- dlply(Cars93, .(Origin), function(d) rlm(formula = Horsepower ~ EngineSize, data = d, maxit = 150, psi = "psi.bisquare"))
fix(regressions)
coefs <- ldply(regressions, coef)
viewData(coefs)
viewData(Cars93)
regressions <- dlply(Cars93, c(.(Origin), .(Type)), function(d) rlm(formula = Horsepower ~ EngineSize, data = d, maxit = 150, psi = "psi.bisquare"))
fix(regressions)
coefs <- ldply(regressions, coef)
viewData(coefs)
regressions <- dlply(Cars93, c(.(Origin), .(Type)), rlm(formula = Horsepower ~ EngineSize, maxit = 150, psi = "psi.bisquare"))
regressions <- dlply(Cars93, c(.(Origin), .(Type)), rlm, formula = Horsepower ~ EngineSize, maxit = 150, psi = "psi.bisquare")
install.packages('inline')
install.packages('Rcpp')
install.packages('RcppEigen')
install.packages("inline")
install.packages(c("bitops", "Cairo", "coda", "data.table", "googleVis", "maptools", "markdown", "parser", "raster", "RcppArmadillo", "RCurl", "sp", "tableplot", "tseries", "xts", "zoo"))
install.packages("inline")
install.packages('inline')
install.packages('Rcpp')
install.packages('RcppEigen')
source('~/.active-rstudio-document', echo=TRUE)
options()
options("repos")
options(repos = c(getOption("repos"), rstan = "http://wiki.stan.googlecode.com/git/R"))
install.packages('rstan', type = 'source')
options("repos")
source('~/.active-rstudio-document', echo=TRUE)
fit
plot(fit)
library("lme4", lib.loc="/Users/bask/Library/R/2.15/library")
install.packages("influence.ME")
library(influence.me)
library("influence.ME", lib.loc="/Users/bask/Library/R/2.15/library")
data(school23)
model.a <- lmer(math ~ structure + SES  + (1 | school.ID), data=school23)
alt.est.a <- influence(model.a, "school.ID")
head(school23)
alt.est.a
model.b <- exclude.influence(model.a, "school.ID", "7472")
alt.est.b <- influence(model.b, "school.ID")
cooks.distance(alt.est.b)
model.c <- exclude.influence(model.b, "school.ID", "54344")
alt.est.c <- influence(model.c, "school.ID")
cooks.distance(alt.est.c)
viewData(school23)
model.a
summary(model.a)
data(Penicillin, package="lme4")
model.b <- lmer(diameter ~ (1|plate) + (1|sample), Penicillin)
library(influence.me)
library(influence.ME)
model.b <- lmer(diameter ~ (1|plate) + (1|sample), Penicillin)
alt.est.d <- influence(model=model.b, group="plate")
outer(month.abb, 1999:2003, FUN = "paste")
paste(month.abb, 1999:2003)
x <- 1:9; names(x) <- x
# Multiplication & Power Tables
x %o% x
y <- 2:8; names(y) <- paste(y,":",sep="")
outer(y, x, "^")
rm(x, y)
dd <- data.frame(group = rep(letters[1:3], each = 5),
mass = c(rnorm(5, 30), rnorm(5, 50),
rnorm(5, 40)))
dd
library(plyr)
dd5 <- ddply(dd,.(group),function(x) x[max(x$mass)<45,])
dd5
max(x$mass)
rm(dd,dd5)
install.packages(c("evaluate", "formatR", "fracdiff", "ggplot2", "gtable", "knitr", "plyr", "RcppEigen", "reshape2", "scales", "StatMatch", "stringr"))
source('~/.active-rstudio-document', echo=TRUE)
rstudio::viewData(df)
tapply(df$Sales, df$ID, function(a)head(which(a>0),1))
tapply(df$Sales, df$ID, function(a) Filter(function(x) which(x>0), a))
tapply(df$Sales, df$ID, function(a) Find(function(x) which(x>0), a))
tapply(df$Sales, df$ID, function(a) Find(function(x) x>0, a))
tapply(df$Sales, df$ID, function(a) which(Find(function(x) x>0, a)))
tapply(df$Sales, df$ID, function(a) df[Find(function(x) x>0, a)),]
tapply(df$Sales, df$ID, function(a) df[Find(function(x) x>0, a),])
tapply(df$Sales, df$ID, function(a) row.names([Find(function(x) x>0, a))
tapply(df$Sales, df$ID, function(a) row.names(Find(function(x) x>0, a))
)
tapply(df$Sales, df$ID, function(a) Find(function(x) x>0, a))
rownames(df$Sales)
rownames(df)
tapply(df$Sales, df$ID, function(a) Position(function(x) x>0, a))
ddply(df, .(ID), function(a) Position(function(x) x>0, a))
library(plyr)
ddply(df, .(ID), function(a) Position(function(x) x>0, a))
dlply(df, .(ID), function(a) Position(function(x) x>0, a))
dlply(df, .(ID), function(a) Position(function(x) x$Sales>0, a))
dlply(df, .(ID), summarise, Position(function(x) x$Sales>0, a))
dlply(df, .(ID), function(x) Position(x$Sales>0, a))
dlply(df, .(ID), function(x) Position(x$Sales>0, x))
dlply(df, .(ID), function(x) Position(function(a) a$Sales>0, x))
dlply(df, .(ID), function(x) Position(function(a) a>0, x$Sales))
lapply(unique(df$ID),function(a) head(subset(df,ID==a & Sales>0),1))
Position(function(a) df$ID == a, unique(df$ID))
unique(df$ID)
Position(function(a) a[[Sales]] > 0, list(df$ID, df$Sales))
Position(function(a) a[["Sales"]] > 0, list(df$ID, df$Sales))
list(df$ID, df$Sales)
Position(function(a) a[[2]] > 0, list(df$ID, df$Sales))
dlply(df, .(ID), function(x) Position(function(a) a>0, x$Sales))
dlply(df, .(ID), function(x) df[Position(function(a) a>0, x$Sales),])
df$row <- 1:nrow(df)
rstudio::viewData(df)
dlply(df, .(ID), function(x) df[Position(function(a) a>0, x$Sales),"row"])
tapply(1:nrow(df), df$ID, function(a) Position(function(x) df[x, "Sales"]>0, a))
tapply(1:nrow(df), df$ID, function(a) a[Position(function(x) df[x, "Sales"]>0, a)])
res3 <- tapply(
1:nrow(df)
, df$ID
, function(Idx) Idx[Position(function(x) df[x, "Sales"] > 0, Idx)]
)
res2 <- tapply(1:nrow(df),
INDEX=df$ID,FUN=function(idxs) idxs[df[idxs,'Sales'] > 0][1])
identical(res3, res2)
basket <- c("apple", "banana", "lemon", "orange",
"orange", "pear", "cherry")
WHICH <- sapply(c("banana", "orange"), function(x) grep(x, basket))
for (i in 1:length(WHICH)) basket[WHICH[[i]]] <- c("apple", "pineapple")[i]
basket
source('~/.active-rstudio-document', echo=TRUE)
off_list
apply(off_list, 1,
function(off) {%>
<option value="<%=off["id"]%>"><%=off["offerings"]%></option>
<%}
)
apply(off_list, 1,
function(off) {cat(
"<option value=", off["id"], "><", off["offerings"], "></option>")}
)
data(cribs)
library(MASSù)
library(MASS)
data(cribs)
data(crib)
detach("package:MASS", unload=TRUE)
data(crabs)
data(crab)
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
data(crab)
data(crabs)
x <- c(5,7,3,6,9,4,1,4,7,10,8,5,7,9,7,1, 8, 4, 4,9);
head(which(x > 5 & seq_along(x) > 10), 1)
Find(which(x > 5 & seq_along(x) > 10), x)
Find(x > 5 & seq_along(x) > 10, x)
fr <- function(x) x > 5 & seq_along(x) > 10
Find(fr, x)
fr(x)
Find(fr, x, nomatch=0)
fr(x)
Find(fr, x, right=TRUE)
Position(fr, x, right=TRUE)
Position(fr, x, right=TRUE, nomatch=0)
Find(fr, x, right=TRUE)
fr(x)
Negate(fr, x)
Negate(fr(x))
fr(x)
Negate(is.function)
Filter(fr, x)
sapply(ls(baseenv()), get, baseenv())
sapply(ls(baseenv())ls(baseenv()), get, baseenv())
ls(baseenv())
Filter(Negate(is.function),  sapply(ls(baseenv()), get, baseenv()))
Find(function(x) x > 5 & seq_along(x) > 10, x, right=TRUE)
Filter(fr, x)
fr <- function(y) y > 5 & seq_along(y) > 10
Filter(fr, x)
x <- c(5,7,3,6,9,4,1,4,7,10,8,5,7,9,7,1, 8, 4, 4,9)
head(which(x > 5 & seq_along(x) > 10), 1)
fr <- function(y) y > 5 & seq_along(y) > 10
Find(fr, x, right=TRUE)
dati <- read.table("~/Desktop/dati.csv", header=T, quote="\"")
View(dati)
df <- read.table("~/Desktop/dati.csv", header=T, quote="\"")
res3 <- tapply(
1:nrow(df)
, df$ID
, function(Idx) Idx[Position(function(x) df[x, "Sales"] > 0, Idx)]
)
fix(res3)
res3 <- tapply(
1:nrow(df)
, df$ID
, function(Idx) Position(function(x) df[x, "Sales"] > 0, Idx, right = TRUE)
)
fix(res3)
res3 <- tapply(
1:nrow(df)
, df$ID
, function(Idx) Position(function(x) df[x, "Sales"] > 0, Idx, right = TRUE)
)
res2 <- tapply(
1:nrow(df)
, df$ID
, function(Idx) Idx[Position(function(x) df[x, "Sales"] > 0, Idx)]
)
identical(res3, res2)
res3
res2
res3 <- tapply(
1:nrow(df)
, df$ID
, function(Idx) Position(function(x) df[x, "Sales"] > 0, Idx, right = FALSE)
)
res2 <- tapply(
1:nrow(df)
, df$ID
, function(Idx) Idx[Position(function(x) df[x, "Sales"] > 0, Idx)]
)
identical(res3, res2)
res3
res2
res2 <- tapply(
1:nrow(df)
, df$ID
, function(Idx) Idx[Find(function(x) df[x, "Sales"] > 0, Idx)]
)
res2
Idx[Find(function(x) df[x, "Sales"] > 0, df)]
df[Find(function(x) df[x, "Sales"] > 0, df)]
df[Find(function(x) df[x, "Sales"] > 0, df$ID)]
View(df)
df[Find(function(x) df[x, "Sales"] > 0, 1:nrow(df))]
df[Find(function(x) df[x, "Sales"] > 0, 1:nrow(df)),]
df[Position(function(x) df[x, "Sales"] > 0, 1:nrow(df)),]
Position(function(x) df[x, "Sales"] > 0, 1:nrow(df))
Find(function(x) df[x, "Sales"] > 0, 1:nrow(df))
Find(function(x) df[x, "Sales"] > 0, 1:nrow(df), right = FALSE)
Find(function(x) df[x, "Sales"] > 0, 1:nrow(df), right = TRUE)
Find(function(x) df[x, "Sales"] > 0, 1:nrow(df))
1:nrow(df)
x
Find(function(y) y > 5 & seq_along(y) > 10, 1:nrow(df))
Find(function(y) (y > 5 & seq_along(y) > 10), 1:nrow(df))
Find(function(y) (y > 5 & seq_along(y) > 10), x)
fr2 <- function(x) df[x, "Sales"] > 0
Find(fr2, 1:nrow(df))
fr <- function(y) { y > 5 & seq_along(y) > 10}
Find(fr, x)
fr <- function(y) { print(y);y > 5 & seq_along(y) > 10}
Find(fr, x)
seq_along(10)
seq_along(12)
seq_along(c(3, 5, 6 12))
seq_along(x)
fr <- function(y) { x[y] > 5 & y > 10}
Find(fr, seq_along(x))
fr <- function(y) x[y] > 5 & y > 10
Find(fr, seq_along(x))
Find(function(y) x[y] > 5 & y > 10, seq_along(x))
Find(function(y) x[y] > 5 & y > 10, seq_along(x), right = TRUE)
x[Find(function(y) x[y] > 5 & y > 10, seq_along(x))]
source('~/.active-rstudio-document', echo=TRUE)
data1 <- data.frame(data[1:3], stack(data[-c(1, 2, 3)]))
View(data1)
source('~/.active-rstudio-document', echo=TRUE)
X <- matrix(runif(0, 1, 2000), ncol = 2)
plot(X, cex = 0.5)
hpts <- chull(X)
hpts <- c(hpts, hpts[1])
lines(X[hpts, ])
View(X)
source('~/.active-rstudio-document', echo=TRUE)
X <- matrix(rbinom(2000, 10, 0.5), ncol = 2)
plot(X, cex = 0.5)
hpts <- chull(X)
hpts <- c(hpts, hpts[1])
lines(X[hpts, ])
source('~/.active-rstudio-document', echo=TRUE)
X <- matrix(rbeta(2000, 1, 1), ncol = 2)
plot(X, cex = 0.5)
hpts <- chull(X)
hpts <- c(hpts, hpts[1])
lines(X[hpts, ])
source('~/.active-rstudio-document', echo=TRUE)
X <- matrix(rweibull(2000, 70), ncol = 2)
plot(X, cex = 0.5)
hpts <- chull(X)
hpts <- c(hpts, hpts[1])
lines(X[hpts, ])
source('~/.active-rstudio-document', echo=TRUE)
X <- matrix(rweibull(2000, 100)+rnorm(2000), ncol = 2)
plot(X, cex = 0.5)
hpts <- chull(X)
hpts <- c(hpts, hpts[1])
lines(X[hpts, ])
source('~/.active-rstudio-document', echo=TRUE)
View(X)
X <- matrix(sample(c(rweibull(2000, 20),runif(2000), 2000), replace = TRUE), ncol = 2)
X <- matrix(sample(c(rweibull(2000, 20),runif(2000), 4000), replace = TRUE), ncol = 2)
source('~/.active-rstudio-document', echo=TRUE)
X <- matrix(sample(Xpool, 1000, replace = TRUE), ncol = 2)
Xpool <- c(rnorm(500), rnorm(200, 2, 2))
X <- matrix(sample(Xpool, 1000, replace = TRUE), ncol = 2)
source('~/.active-rstudio-document', echo=TRUE)
x <- c(1:9, 8:1)
y <- c(1, 2*(5:3), 2, -1, 17, 9, 8, 2:9)
op <- par(mfcol = c(3, 1))
for(xpd in c(FALSE, TRUE, NA)) {
plot(1:10, main = paste("xpd =", xpd))
box("figure", col = "pink", lwd = 3)
polygon(x, y, xpd = xpd, col = "orange", lty = 2, lwd = 2, border = "red")
}
par(op)
n <- 100
xx <- c(0:n, n:0)
yy <- c(c(0, cumsum(stats::rnorm(n))), rev(c(0, cumsum(stats::rnorm(n)))))
plot   (xx, yy, type = "n", xlab = "Time", ylab = "Distance")
polygon(xx, yy, col = "gray", border = "red")
title("Distance Between Brownian Motions")
fix(hpts)
X[hpts, ]
polygon(X[hpts, 1], X[hpts, 2])
plot(X, cex = 0.5)
polygon(X[hpts, 1], X[hpts, 2])
hpts <- chull(X)
fix(hpts)
polygon(X[hpts, 1] + runif(), X[hpts, 2])
polygon(X[hpts, 1] + runif(1), X[hpts, 2])
polygon(X[hpts, 1] + runif(500), X[hpts, 2])
X[hpts, 1] + runif(500)
polygon(X[hpts, 1] + runif(250), X[hpts, 2])
X[hpts, 1]
polygon(X[hpts, 1] + runif(length(hpts)), X[hpts, 2])
source('~/.active-rstudio-document', echo=TRUE)
polygon(X[hpts, 1] + runif(length(hpts)), X[hpts, 2] + runif(length(hpts)))
source('~/.active-rstudio-document', echo=TRUE)
library(slidify)
slidify("Index.Rmd")
setwd("~/Documents/Academy/IBAF/MANFOR/SalamHabIndex")
slidify("Index.Rmd")
publish(user = "mbask", repo = "SalamHabitatIndex", host = 'github')
